#!/usr/bin/env bash

# Usage: bin/run-wordpress [WORDPRESS_VERSION] [PHP_VERSION]
# Example: bin/run-wordpress 67 82

CONFIG_FILE="config/wp-version.conf"
PLUGINS_CONFIG_FILE="config/wp-plugins.conf"

# Ensure Docker CLI is installed.
if ! command -v docker >/dev/null; then
  echo "Docker CLI is required."
  exit 1
fi

WORDPRESS_VERSION_ENV="${1:-$WORDPRESS_VERSION}"
PHP_VERSION_ENV="${2:-$PHP_VERSION}"

WP_IMAGE_KEY="${WORDPRESS_VERSION_ENV}_${PHP_VERSION_ENV}"
WP_IMAGE=$(grep "^${WP_IMAGE_KEY}=" "$CONFIG_FILE" | cut -d'=' -f2)
WORDPRESS_PORT="80${WORDPRESS_VERSION_ENV}"

# Get plugins for this WordPress/PHP version
PLUGINS_LIST=$(grep "^${WP_IMAGE_KEY}=" "$PLUGINS_CONFIG_FILE" | cut -d'=' -f2)

if [ -z "$WP_IMAGE" ]; then
  echo "Unsupported version combination: $WP_IMAGE_KEY"
  exit 1
fi

# Parse WordPress version parameter
if [[ "$WORDPRESS_VERSION_ENV" =~ ^[0-9]{2}$ ]]; then
  WORDPRESS_VERSION="${WORDPRESS_VERSION_ENV:0:1}.${WORDPRESS_VERSION_ENV:1:1}"
else
  WORDPRESS_VERSION="$WORDPRESS_VERSION_ENV"
fi

export WORDPRESS_VERSION 
export WORDPRESS_VERSION_ENV
export WP_IMAGE

# Parse WordPress version parameter
if [[ "$PHP_VERSION_ENV" =~ ^[0-9]{2}$ ]]; then
  PHP_VERSION="${PHP_VERSION_ENV:0:1}.${PHP_VERSION_ENV:1:1}"
else
  PHP_VERSION="$PHP_VERSION_ENV"
fi
# Exports as dot seperated: 5.6
export PHP_VERSION
export PHP_VERSION_ENV

export WORDPRESS_PORT

export COMPOSE_PROJECT_NAME="pdc_${WORDPRESS_VERSION_ENV}_${PHP_VERSION_ENV}"

echo "Starting Docker environment with WordPress $WORDPRESS_VERSION and PHP $PHP_VERSION..."
docker compose -f config/docker-compose.yml up -d

echo "Installing WordPress..."

docker compose -f config/docker-compose.yml run --rm --user root --no-TTY --env WORDPRESS_PORT --env WORDPRESS_VERSION wpcli bash <<EOF
set -e

if [ ! -f wp-load.php ]; then
  echo "Downloading WordPress \${WORDPRESS_VERSION}..."
  TMP=\$(mktemp -d)
  curl -fsSL "http://wordpress.org/wordpress-\${WORDPRESS_VERSION}.tar.gz" | tar -xz -C "\$TMP"
  cp -R "\$TMP"/wordpress/* .
  rm -rf "\$TMP"
fi

if [ ! -f wp-config.php ]; then
  wp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --dbhost=db --allow-root --skip-salts
fi

until wp db check --allow-root; do
  echo "DB not ready yet.."
  sleep 2
done

wp db create --allow-root 2>/dev/null || true

if ! wp core is-installed --allow-root; then
  wp core install \
    --url=http://localhost:${WORDPRESS_PORT} \
    --title='My Site' \
    --admin_user=admin \
    --admin_password=password \
    --admin_email=wordpress@example.com \
    --skip-email \
    --allow-root
  chown -R 33:33 wp-content/uploads/
else
  echo "WordPress already installed."
fi
EOF

echo "Activating plug-in.."
docker compose -f config/docker-compose.yml run --rm wpcli wp plugin activate pdc-connector --allow-root

if [ "$WORDPRESS_VERSION_ENV" -ge 55 ] && [ -n "$PLUGINS_LIST" ]; then
  echo "Installing compatible plugins for WordPress ${WORDPRESS_PORT}.."
  
  # Parse and install each plugin
  IFS=',' read -ra PLUGINS <<< "$PLUGINS_LIST"
  for plugin_spec in "${PLUGINS[@]}"; do
    plugin_name=$(echo "$plugin_spec" | cut -d':' -f1)
    plugin_version=$(echo "$plugin_spec" | cut -d':' -f2)
    
    echo "Installing $plugin_name version $plugin_version..."
    docker compose -f config/docker-compose.yml run --rm --user 33 wpcli wp plugin install "$plugin_name" --version="$plugin_version" --activate --allow-root || exit 1
  done
fi

MAX_ATTEMPTS=10
ATTEMPT=0
until curl -s --head --fail "http://localhost:${WORDPRESS_PORT}" >/dev/null; do
  if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
    echo "Timed out waiting for WordPress"
    exit 1
  fi
  echo "Waiting for WordPress to be ready..."
  sleep 2
  ATTEMPT=$((ATTEMPT + 1))
done

echo "WordPress is ready at http://localhost:${WORDPRESS_PORT} (admin/password)"
echo "To stop, run: bin/stop-wordpress ${WORDPRESS_VERSION_ENV} ${PHP_VERSION_ENV}"